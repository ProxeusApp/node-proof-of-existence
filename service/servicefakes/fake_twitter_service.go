// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"sync"

	"github.com/ProxeusApp/node-proof-of-existence/service"
	"github.com/dghubble/go-twitter/twitter"
)

type FakeTwitterService struct {
	GetTweetByUrlOrIdStub        func(string) (*twitter.Tweet, error)
	getTweetByUrlOrIdMutex       sync.RWMutex
	getTweetByUrlOrIdArgsForCall []struct {
		arg1 string
	}
	getTweetByUrlOrIdReturns struct {
		result1 *twitter.Tweet
		result2 error
	}
	getTweetByUrlOrIdReturnsOnCall map[int]struct {
		result1 *twitter.Tweet
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTwitterService) GetTweetByUrlOrId(arg1 string) (*twitter.Tweet, error) {
	fake.getTweetByUrlOrIdMutex.Lock()
	ret, specificReturn := fake.getTweetByUrlOrIdReturnsOnCall[len(fake.getTweetByUrlOrIdArgsForCall)]
	fake.getTweetByUrlOrIdArgsForCall = append(fake.getTweetByUrlOrIdArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetTweetByUrlOrId", []interface{}{arg1})
	fake.getTweetByUrlOrIdMutex.Unlock()
	if fake.GetTweetByUrlOrIdStub != nil {
		return fake.GetTweetByUrlOrIdStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTweetByUrlOrIdReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTwitterService) GetTweetByUrlOrIdCallCount() int {
	fake.getTweetByUrlOrIdMutex.RLock()
	defer fake.getTweetByUrlOrIdMutex.RUnlock()
	return len(fake.getTweetByUrlOrIdArgsForCall)
}

func (fake *FakeTwitterService) GetTweetByUrlOrIdCalls(stub func(string) (*twitter.Tweet, error)) {
	fake.getTweetByUrlOrIdMutex.Lock()
	defer fake.getTweetByUrlOrIdMutex.Unlock()
	fake.GetTweetByUrlOrIdStub = stub
}

func (fake *FakeTwitterService) GetTweetByUrlOrIdArgsForCall(i int) string {
	fake.getTweetByUrlOrIdMutex.RLock()
	defer fake.getTweetByUrlOrIdMutex.RUnlock()
	argsForCall := fake.getTweetByUrlOrIdArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTwitterService) GetTweetByUrlOrIdReturns(result1 *twitter.Tweet, result2 error) {
	fake.getTweetByUrlOrIdMutex.Lock()
	defer fake.getTweetByUrlOrIdMutex.Unlock()
	fake.GetTweetByUrlOrIdStub = nil
	fake.getTweetByUrlOrIdReturns = struct {
		result1 *twitter.Tweet
		result2 error
	}{result1, result2}
}

func (fake *FakeTwitterService) GetTweetByUrlOrIdReturnsOnCall(i int, result1 *twitter.Tweet, result2 error) {
	fake.getTweetByUrlOrIdMutex.Lock()
	defer fake.getTweetByUrlOrIdMutex.Unlock()
	fake.GetTweetByUrlOrIdStub = nil
	if fake.getTweetByUrlOrIdReturnsOnCall == nil {
		fake.getTweetByUrlOrIdReturnsOnCall = make(map[int]struct {
			result1 *twitter.Tweet
			result2 error
		})
	}
	fake.getTweetByUrlOrIdReturnsOnCall[i] = struct {
		result1 *twitter.Tweet
		result2 error
	}{result1, result2}
}

func (fake *FakeTwitterService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getTweetByUrlOrIdMutex.RLock()
	defer fake.getTweetByUrlOrIdMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTwitterService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.TwitterService = new(FakeTwitterService)
